// ============================================
// AI CHATBOT ASSISTANT - TR·ª¢ L√ù ·∫¢O TH√îNG MINH
// ============================================

class AIAssistant {
    constructor(productivityTracker) {
        this.tracker = productivityTracker;
        this.conversationHistory = [];
        this.isListening = false;
        this.recognition = null;
        
        // Tr·∫°ng th√°i t·ª± ƒë·ªông
        this.autoMode = {
            enabled: false,
            alerts: true,
            suggestions: true,
            reports: true
        };
        
        // Ng∆∞·ª°ng c·∫£nh b√°o
        this.thresholds = {
            stressLevel: 3, // 3 l·∫ßn li√™n ti·∫øp cƒÉng th·∫≥ng
            tirednessLevel: 5, // 5 l·∫ßn li√™n ti·∫øp m·ªát m·ªèi
            focusDropLevel: 40, // ƒêi·ªÉm t·∫≠p trung < 40
            noFaceDetected: 10 // 10 l·∫ßn kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t
        };
        
        // B·ªô ƒë·∫øm c·∫£nh b√°o
        this.alertCounters = {
            stress: 0,
            tiredness: 0,
            noFace: 0,
            lastAlert: 0
        };
        
        this.init();
    }
    
    init() {
        this.setupVoiceRecognition();
        this.setupChatUI();
        this.startAutoMonitoring();
        this.loadSettings();
    }
    
    // ============================================
    // GI√ÅM S√ÅT T·ª∞ ƒê·ªòNG - CORE FEATURE
    // ============================================
    
    startAutoMonitoring() {
        // Ki·ªÉm tra m·ªói 5 gi√¢y
        setInterval(() => {
            if (!this.autoMode.enabled) return;
            
            this.checkHealthAlerts();
            this.checkProductivityPatterns();
            this.checkPresence();
            this.provideSmartSuggestions();
        }, 5000);
    }
    
    checkHealthAlerts() {
        const recentEmotions = this.tracker.emotionHistory.slice(-10);
        if (recentEmotions.length < 5) return;
        
        // ƒê·∫øm c·∫£m x√∫c ti√™u c·ª±c li√™n ti·∫øp
        const stressEmotions = ['angry', 'disgusted', 'fearful'];
        const tiredEmotions = ['sad', 'fearful'];
        
        let consecutiveStress = 0;
        let consecutiveTired = 0;
        
        recentEmotions.slice(-5).forEach(item => {
            if (stressEmotions.includes(item.emotion)) {
                consecutiveStress++;
            }
            if (tiredEmotions.includes(item.emotion)) {
                consecutiveTired++;
            }
        });
        
        // C·∫£nh b√°o cƒÉng th·∫≥ng
        if (consecutiveStress >= this.thresholds.stressLevel) {
            this.alertCounters.stress++;
            if (this.alertCounters.stress >= 2) {
                this.sendAlert('stress', 
                    '‚ö†Ô∏è C·∫£nh B√°o CƒÉng Th·∫≥ng', 
                    'B·∫°n ƒëang cƒÉng th·∫≥ng k√©o d√†i! H√£y ngh·ªâ ng∆°i ngay.',
                    'high'
                );
                this.alertCounters.stress = 0;
            }
        }
        
        // C·∫£nh b√°o m·ªát m·ªèi
        if (consecutiveTired >= this.thresholds.tirednessLevel) {
            this.alertCounters.tiredness++;
            if (this.alertCounters.tiredness >= 2) {
                this.sendAlert('tired',
                    'üò¥ C·∫£nh B√°o M·ªát M·ªèi',
                    'B·∫°n c√≥ v·∫ª r·∫•t m·ªát. ƒê·ªÅ xu·∫•t: Ngh·ªâ ng∆°i 15 ph√∫t ho·∫∑c ƒëi d·∫°o.',
                    'medium'
                );
                this.alertCounters.tiredness = 0;
            }
        }
        
        // C·∫£nh b√°o ƒëi·ªÉm t·∫≠p trung th·∫•p
        if (this.tracker.focusScore < this.thresholds.focusDropLevel) {
            this.sendAlert('focus',
                'üéØ M·∫•t T·∫≠p Trung',
                `ƒêi·ªÉm t·∫≠p trung c·ªßa b·∫°n ch·ªâ c√≤n ${Math.round(this.tracker.focusScore)}/100. H√£y l√†m b√†i t·∫≠p th·ªü s√¢u!`,
                'medium'
            );
        }
    }
    
    checkPresence() {
        const recentHistory = this.tracker.emotionHistory.slice(-10);
        
        // Ki·ªÉm tra kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t
        const noFaceCount = recentHistory.filter(item => 
            item.confidence === 0 || !item.emotion
        ).length;
        
        if (noFaceCount >= this.thresholds.noFaceDetected) {
            this.alertCounters.noFace++;
            if (this.alertCounters.noFace >= 2) {
                this.sendAlert('absence',
                    'üë§ Ph√°t Hi·ªán V·∫Øng M·∫∑t',
                    'B·∫°n kh√¥ng c√≥ m·∫∑t tr∆∞·ªõc camera. ƒêang ghi nh·∫≠n th·ªùi gian v·∫Øng m·∫∑t.',
                    'high'
                );
                
                // Ghi nh·∫≠n v·∫Øng m·∫∑t
                this.tracker.recordAbsence(Date.now());
                this.alertCounters.noFace = 0;
            }
        } else {
            this.alertCounters.noFace = 0;
        }
    }
    
    checkProductivityPatterns() {
        // Ph√¢n t√≠ch xu h∆∞·ªõng nƒÉng su·∫•t
        const history = this.tracker.emotionHistory;
        if (history.length < 20) return;
        
        const last20 = history.slice(-20);
        const avgFocus = last20.reduce((sum, item) => sum + item.focusScore, 0) / 20;
        
        // N·∫øu nƒÉng su·∫•t gi·∫£m li√™n t·ª•c
        if (avgFocus < 50 && Date.now() - this.alertCounters.lastAlert > 300000) { // 5 ph√∫t
            this.sendSuggestion(
                'üí° G·ª£i √ù TƒÉng NƒÉng Su·∫•t',
                'NƒÉng su·∫•t ƒëang gi·∫£m. T√¥i ƒë·ªÅ xu·∫•t:\n' +
                '1. Ngh·ªâ ng∆°i 5-10 ph√∫t\n' +
                '2. U·ªëng n∆∞·ªõc, ƒÉn nh·∫π\n' +
                '3. B·∫≠t nh·∫°c t·∫≠p trung\n' +
                '4. Thay ƒë·ªïi t∆∞ th·∫ø ng·ªìi'
            );
            this.alertCounters.lastAlert = Date.now();
        }
    }
    
    provideSmartSuggestions() {
        if (!this.autoMode.suggestions) return;
        
        const now = new Date();
        const hour = now.getHours();
        
        // G·ª£i √Ω theo th·ªùi gian
        if (hour >= 12 && hour <= 13 && !this.tracker.lunchBreakTaken) {
            this.sendSuggestion('üçΩÔ∏è Gi·ªù ƒÇn Tr∆∞a', 'ƒê√£ ƒë·∫øn gi·ªù ƒÉn tr∆∞a! H√£y ngh·ªâ ng∆°i v√† n·∫°p nƒÉng l∆∞·ª£ng.');
            this.tracker.lunchBreakTaken = true;
        }
        
        if (hour >= 22 && !this.tracker.nightWarning) {
            this.sendSuggestion('üåô L√†m Vi·ªác Mu·ªôn', 'ƒê√£ mu·ªôn r·ªìi! L√†m vi·ªác khuya ·∫£nh h∆∞·ªüng s·ª©c kh·ªèe. H√£y ngh·ªâ ng∆°i.');
            this.tracker.nightWarning = true;
        }
    }
    
    // ============================================
    // H·ªÜ TH·ªêNG C·∫¢NH B√ÅO
    // ============================================
    
    sendAlert(type, title, message, priority = 'medium') {
        // Hi·ªÉn th·ªã UI alert
        this.showAlert(title, message, priority);
        
        // Ph√°t √¢m thanh
        this.playAlertSound(priority);
        
        // Browser notification
        this.sendBrowserNotification(title, message);
        
        // Voice alert (n·∫øu b·∫≠t)
        if (this.autoMode.voiceAlerts) {
            this.speak(message);
        }
        
        // Ghi log
        this.logAlert(type, title, message, priority);
    }
    
    sendSuggestion(title, message) {
        this.showSuggestion(title, message);
    }
    
    showAlert(title, message, priority) {
        const alertBox = document.createElement('div');
        alertBox.className = `ai-alert ai-alert-${priority}`;
        alertBox.innerHTML = `
            <div class="alert-header">
                <span class="alert-icon">${this.getAlertIcon(priority)}</span>
                <span class="alert-title">${title}</span>
                <button class="alert-close" onclick="this.parentElement.parentElement.remove()">‚úï</button>
            </div>
            <div class="alert-message">${message}</div>
            <div class="alert-actions">
                <button onclick="aiAssistant.dismissAlert(this)" class="btn-dismiss">ƒê√£ hi·ªÉu</button>
                <button onclick="aiAssistant.takeBreak()" class="btn-action">Ngh·ªâ ng∆°i ngay</button>
            </div>
        `;
        
        const container = document.getElementById('alertContainer') || this.createAlertContainer();
        container.appendChild(alertBox);
        
        // Auto remove sau 15 gi√¢y
        setTimeout(() => {
            if (alertBox.parentElement) {
                alertBox.style.animation = 'slideOutRight 0.3s ease-out';
                setTimeout(() => alertBox.remove(), 300);
            }
        }, 15000);
    }
    
    showSuggestion(title, message) {
        const suggestionBox = document.createElement('div');
        suggestionBox.className = 'ai-suggestion';
        suggestionBox.innerHTML = `
            <div class="suggestion-header">
                <span class="suggestion-icon">üí°</span>
                <span class="suggestion-title">${title}</span>
                <button class="suggestion-close" onclick="this.parentElement.parentElement.remove()">‚úï</button>
            </div>
            <div class="suggestion-message">${message.replace(/\n/g, '<br>')}</div>
        `;
        
        const container = document.getElementById('alertContainer') || this.createAlertContainer();
        container.appendChild(suggestionBox);
        
        setTimeout(() => {
            if (suggestionBox.parentElement) {
                suggestionBox.style.animation = 'fadeOut 0.3s ease-out';
                setTimeout(() => suggestionBox.remove(), 300);
            }
        }, 20000);
    }
    
    createAlertContainer() {
        const container = document.createElement('div');
        container.id = 'alertContainer';
        container.className = 'alert-container';
        document.body.appendChild(container);
        return container;
    }
    
    getAlertIcon(priority) {
        const icons = {
            high: 'üö®',
            medium: '‚ö†Ô∏è',
            low: '‚ÑπÔ∏è'
        };
        return icons[priority] || '‚ÑπÔ∏è';
    }
    
    playAlertSound(priority) {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        if (priority === 'high') {
            // √Çm thanh kh·∫©n c·∫•p
            oscillator.frequency.value = 880;
            gainNode.gain.value = 0.5;
            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.2);
            
            setTimeout(() => {
                const osc2 = audioContext.createOscillator();
                const gain2 = audioContext.createGain();
                osc2.connect(gain2);
                gain2.connect(audioContext.destination);
                osc2.frequency.value = 880;
                gain2.gain.value = 0.5;
                osc2.start();
                osc2.stop(audioContext.currentTime + 0.2);
            }, 300);
        } else {
            oscillator.frequency.value = 600;
            gainNode.gain.value = 0.3;
            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.3);
        }
    }
    
    sendBrowserNotification(title, message) {
        if ('Notification' in window && Notification.permission === 'granted') {
            new Notification(title, {
                body: message,
                icon: '/favicon.ico',
                badge: '/favicon.ico',
                tag: 'ai-assistant',
                requireInteraction: true
            });
        }
    }
    
    dismissAlert(button) {
        const alert = button.closest('.ai-alert');
        if (alert) alert.remove();
    }
    
    takeBreak() {
        // T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu break time
        if (this.tracker.isPomodoroRunning) {
            this.tracker.stopPomodoro();
        }
        
        this.speak('ƒê∆∞·ª£c r·ªìi, h√£y ngh·ªâ ng∆°i th∆∞ gi√£n nh√©!');
        this.showBreakScreen();
    }
    
    showBreakScreen() {
        const breakScreen = document.createElement('div');
        breakScreen.className = 'break-screen';
        breakScreen.innerHTML = `
            <div class="break-content">
                <h1>‚òï Th·ªùi Gian Ngh·ªâ Ng∆°i</h1>
                <p>H√£y ƒë·ª©ng d·∫≠y, v·∫≠n ƒë·ªông v√† th∆∞ gi√£n!</p>
                <div class="break-timer" id="breakTimer">5:00</div>
                <button onclick="aiAssistant.endBreak()" class="btn-end-break">K·∫øt th√∫c ngh·ªâ</button>
            </div>
        `;
        
        document.body.appendChild(breakScreen);
        
        let breakTime = 300; // 5 ph√∫t
        const interval = setInterval(() => {
            breakTime--;
            const mins = Math.floor(breakTime / 60);
            const secs = breakTime % 60;
            document.getElementById('breakTimer').textContent = 
                `${mins}:${String(secs).padStart(2, '0')}`;
            
            if (breakTime <= 0) {
                clearInterval(interval);
                this.endBreak();
            }
        }, 1000);
        
        breakScreen.dataset.intervalId = interval;
    }
    
    endBreak() {
        const breakScreen = document.querySelector('.break-screen');
        if (breakScreen) {
            const intervalId = breakScreen.dataset.intervalId;
            if (intervalId) clearInterval(intervalId);
            breakScreen.remove();
        }
        
        this.speak('H·∫øt gi·ªù ngh·ªâ! H√£y ti·∫øp t·ª•c l√†m vi·ªác v·ªõi tinh th·∫ßn m·ªõi!');
    }
    
    // ============================================
    // AI CHATBOT
    // ============================================
    
    setupChatUI() {
        // Chat UI s·∫Ω ƒë∆∞·ª£c t·∫°o trong HTML
    }
    
    async processMessage(userMessage) {
        // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng
        this.addMessageToChat('user', userMessage);
        
        // Ph√¢n t√≠ch √Ω ƒë·ªãnh
        const intent = this.analyzeIntent(userMessage);
        const response = await this.generateResponse(intent, userMessage);
        
        // Th√™m ph·∫£n h·ªìi bot
        this.addMessageToChat('bot', response);
        
        // Th·ª±c hi·ªán h√†nh ƒë·ªông n·∫øu c·∫ßn
        this.executeAction(intent);
    }
    
    analyzeIntent(message) {
        const msg = message.toLowerCase();
        
        // Ph√¢n lo·∫°i √Ω ƒë·ªãnh
        if (msg.includes('b√°o c√°o') || msg.includes('th·ªëng k√™') || msg.includes('report')) {
            return { type: 'report', data: null };
        }
        if (msg.includes('b·∫Øt ƒë·∫ßu') || msg.includes('start') || msg.includes('pomodoro')) {
            return { type: 'start_pomodoro', data: null };
        }
        if (msg.includes('d·ª´ng') || msg.includes('stop')) {
            return { type: 'stop', data: null };
        }
        if (msg.includes('ngh·ªâ') || msg.includes('break')) {
            return { type: 'break', data: null };
        }
        if (msg.includes('c·∫£m x√∫c') || msg.includes('emotion')) {
            return { type: 'emotion_status', data: null };
        }
        if (msg.includes('t·∫≠p trung') || msg.includes('focus')) {
            return { type: 'focus_status', data: null };
        }
        if (msg.includes('g·ª£i √Ω') || msg.includes('suggest') || msg.includes('help')) {
            return { type: 'suggestion', data: null };
        }
        if (msg.includes('xu·∫•t') || msg.includes('export')) {
            return { type: 'export', data: null };
        }
        
        return { type: 'general', data: null };
    }
    
    async generateResponse(intent, userMessage) {
        switch (intent.type) {
            case 'report':
                return this.generateReport();
            
            case 'start_pomodoro':
                this.tracker.startPomodoro();
                return '‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu Pomodoro! T·∫≠p trung l√†m vi·ªác trong 25 ph√∫t nh√©!';
            
            case 'stop':
                this.tracker.stopPomodoro();
                return '‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng. B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?';
            
            case 'break':
                this.takeBreak();
                return '‚òï ƒê√£ b·∫Øt ƒë·∫ßu gi·ªù ngh·ªâ. H√£y th∆∞ gi√£n!';
            
            case 'emotion_status':
                return this.getEmotionStatus();
            
            case 'focus_status':
                return this.getFocusStatus();
            
            case 'suggestion':
                return this.getPersonalizedSuggestion();
            
            case 'export':
                this.tracker.exportData();
                return 'üíæ ƒêang xu·∫•t b√°o c√°o... File s·∫Ω ƒë∆∞·ª£c t·∫£i xu·ªëng!';
            
            default:
                return this.getGeneralResponse(userMessage);
        }
    }
    
    generateReport() {
        const stats = this.tracker.stats;
        const focusScore = Math.round(this.tracker.focusScore);
        const emotionData = this.tracker.generateEmotionChart();
        
        let report = `üìä **B√ÅO C√ÅO NƒÇNG SU·∫§T**\n\n`;
        report += `üéØ ƒêi·ªÉm t·∫≠p trung: ${focusScore}/100\n`;
        report += `‚è±Ô∏è T·ªïng th·ªùi gian: ${this.tracker.formatTime(stats.totalWorkTime)}\n`;
        report += `üçÖ Pomodoro ho√†n th√†nh: ${this.tracker.pomodoroCount}\n\n`;
        
        report += `üìà **Ph√¢n b·ªë c·∫£m x√∫c:**\n`;
        emotionData.forEach(item => {
            const emoji = this.tracker.getEmotionEmoji(item.emotion);
            report += `${emoji} ${item.emotion}: ${item.percentage}%\n`;
        });
        
        report += `\nüí° **ƒê√°nh gi√°:** `;
        if (focusScore >= 80) {
            report += 'Xu·∫•t s·∫Øc! B·∫°n ƒëang l√†m vi·ªác r·∫•t hi·ªáu qu·∫£!';
        } else if (focusScore >= 60) {
            report += 'T·ªët! H√£y ti·∫øp t·ª•c duy tr√¨.';
        } else {
            report += 'C·∫ßn c·∫£i thi·ªán. H√£y ngh·ªâ ng∆°i v√† t·∫≠p trung h∆°n!';
        }
        
        return report;
    }
    
    getEmotionStatus() {
        const recent = this.tracker.emotionHistory.slice(-1)[0];
        if (!recent) return 'Ch∆∞a c√≥ d·ªØ li·ªáu c·∫£m x√∫c.';
        
        const emoji = this.tracker.getEmotionEmoji(recent.emotion);
        return `${emoji} Hi·ªán t·∫°i b·∫°n ƒëang c·∫£m th·∫•y: **${recent.emotion}** (${(recent.confidence * 100).toFixed(1)}% ch·∫Øc ch·∫Øn)`;
    }
    
    getFocusStatus() {
        const score = Math.round(this.tracker.focusScore);
        let assessment = '';
        
        if (score >= 80) assessment = 'R·∫•t t·ªët! üéØ';
        else if (score >= 60) assessment = '·ªîn üëç';
        else if (score >= 40) assessment = 'C·∫ßn c·∫£i thi·ªán üìà';
        else assessment = 'ƒêang m·∫•t t·∫≠p trung! ‚ö†Ô∏è';
        
        return `üéØ ƒêi·ªÉm t·∫≠p trung hi·ªán t·∫°i: ${score}/100 - ${assessment}`;
    }
    
    getPersonalizedSuggestion() {
        const score = this.tracker.focusScore;
        const recent = this.tracker.emotionHistory.slice(-5);
        
        const suggestions = [
            'üí° H√£y th·ª≠ k·ªπ thu·∫≠t Pomodoro (25 ph√∫t l√†m vi·ªác, 5 ph√∫t ngh·ªâ)',
            '‚òï U·ªëng n∆∞·ªõc ho·∫∑c c√† ph√™ ƒë·ªÉ t·ªânh t√°o h∆°n',
            'üéµ B·∫≠t nh·∫°c t·∫≠p trung (lofi, classical)',
            'üßò Th·ª±c hi·ªán b√†i t·∫≠p th·ªü s√¢u 5 ph√∫t',
            'üö∂ ƒê·ª©ng d·∫≠y ƒëi b·ªô v√†i ph√∫t',
            'üí™ V∆∞∆°n vai, xoay c·ªï ƒë·ªÉ gi·∫£m cƒÉng th·∫≥ng',
            'üåø Nh√¨n ra ngo√†i c·ª≠a s·ªï, th∆∞ gi√£n m·∫Øt'
        ];
        
        if (score < 50) {
            return 'üî¥ B·∫°n ƒëang m·∫•t t·∫≠p trung!\n\n' + 
                   'G·ª£i √Ω:\n' + 
                   suggestions.slice(0, 3).map((s, i) => `${i + 1}. ${s}`).join('\n');
        }
        
        return suggestions[Math.floor(Math.random() * suggestions.length)];
    }
    
    getGeneralResponse(message) {
        const responses = [
            'T√¥i l√† AI Assistant, t√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ Theo d√µi nƒÉng su·∫•t\n‚Ä¢ B√°o c√°o th·ªëng k√™\n‚Ä¢ ƒê·ªÅ xu·∫•t ngh·ªâ ng∆°i\n‚Ä¢ ƒêi·ªÅu khi·ªÉn Pomodoro\n\nB·∫°n c·∫ßn g√¨?',
            'T√¥i ƒëang l·∫Øng nghe! H√£y h·ªèi t√¥i v·ªÅ nƒÉng su·∫•t, c·∫£m x√∫c, ho·∫∑c y√™u c·∫ßu t√¥i l√†m g√¨ ƒë√≥.',
            'Xin l·ªói, t√¥i ch∆∞a hi·ªÉu. B·∫°n c√≥ th·ªÉ h·ªèi:\n‚Ä¢ "B√°o c√°o nƒÉng su·∫•t"\n‚Ä¢ "B·∫Øt ƒë·∫ßu Pomodoro"\n‚Ä¢ "C·∫£m x√∫c hi·ªán t·∫°i"\n‚Ä¢ "G·ª£i √Ω t·∫≠p trung"'
        ];
        
        return responses[Math.floor(Math.random() * responses.length)];
    }
    
    executeAction(intent) {
        // ƒê√£ th·ª±c hi·ªán trong generateResponse
    }
    
    addMessageToChat(sender, message) {
        const chatMessages = document.getElementById('chatMessages');
        if (!chatMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message chat-message-${sender}`;
        
        const time = new Date().toLocaleTimeString('vi-VN', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        
        messageDiv.innerHTML = `
            <div class="message-avatar">${sender === 'user' ? 'üë§' : 'ü§ñ'}</div>
            <div class="message-content">
                <div class="message-text">${message.replace(/\n/g, '<br>')}</div>
                <div class="message-time">${time}</div>
            </div>
        `;
        
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // L∆∞u l·ªãch s·ª≠
        this.conversationHistory.push({ sender, message, time: Date.now() });
    }
    
    // ============================================
    // VOICE ASSISTANT
    // ============================================
    
    setupVoiceRecognition() {
        if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
            console.log('Voice recognition not supported');
            return;
        }
        
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        this.recognition = new SpeechRecognition();
        this.recognition.lang = 'vi-VN';
        this.recognition.continuous = false;
        this.recognition.interimResults = false;
        
        this.recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            this.processMessage(transcript);
        };
        
        this.recognition.onerror = (event) => {
            console.error('Speech recognition error:', event.error);
        };
    }
    
    startListening() {
        if (!this.recognition) {
            alert('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ nh·∫≠n di·ªán gi·ªçng n√≥i!');
            return;
        }
        
        this.isListening = true;
        this.recognition.start();
        this.updateVoiceButton(true);
    }
    
    stopListening() {
        if (this.recognition) {
            this.recognition.stop();
        }
        this.isListening = false;
        this.updateVoiceButton(false);
    }
    
    updateVoiceButton(listening) {
        const voiceBtn = document.getElementById('voiceBtn');
        if (voiceBtn) {
            voiceBtn.textContent = listening ? 'üé§ ƒêang nghe...' : 'üé§ N√≥i';
            voiceBtn.style.background = listening ? '#f5576c' : '';
        }
    }
    
    speak(text) {
        if ('speechSynthesis' in window) {
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'vi-VN';
            utterance.rate = 1.0;
            utterance.pitch = 1.0;
            window.speechSynthesis.speak(utterance);
        }
    }
    
    // ============================================
    // SETTINGS & STORAGE
    // ============================================
    
    toggleAutoMode() {
        this.autoMode.enabled = !this.autoMode.enabled;
        this.saveSettings();
        
        const status = this.autoMode.enabled ? 'B·∫¨T' : 'T·∫ÆT';
        this.addMessageToChat('bot', `ü§ñ Ch·∫ø ƒë·ªô t·ª± ƒë·ªông ƒë√£ ${status}`);
    }
    
    updateSettings(settings) {
        Object.assign(this.autoMode, settings);
        this.saveSettings();
    }
    
    saveSettings() {
        localStorage.setItem('aiAssistantSettings', JSON.stringify({
            autoMode: this.autoMode,
            thresholds: this.thresholds
        }));
    }
    
    loadSettings() {
        try {
            const saved = localStorage.getItem('aiAssistantSettings');
            if (saved) {
                const data = JSON.parse(saved);
                this.autoMode = data.autoMode || this.autoMode;
                this.thresholds = data.thresholds || this.thresholds;
            }
        } catch (error) {
            console.error('Error loading settings:', error);
        }
    }
    
    logAlert(type, title, message, priority) {
        const log = {
            type,
            title,
            message,
            priority,
            timestamp: Date.now()
        };
        
        const logs = JSON.parse(localStorage.getItem('alertLogs') || '[]');
        logs.unshift(log);
        logs.splice(100); // Gi·ªØ 100 logs g·∫ßn nh·∫•t
        
        localStorage.setItem('alertLogs', JSON.stringify(logs));
    }
}

// Kh·ªüi t·∫°o to√†n c·ª•c
let aiAssistant = null;

// Kh·ªüi t·∫°o khi DOM ready v√† c√≥ productivityTracker
document.addEventListener('DOMContentLoaded', () => {
    // ƒê·ª£i productivityTracker ƒë∆∞·ª£c kh·ªüi t·∫°o
    const checkTracker = setInterval(() => {
        if (window.productivityTracker) {
            aiAssistant = new AIAssistant(window.productivityTracker);
            window.aiAssistant = aiAssistant;
            clearInterval(checkTracker);
            console.log('‚úÖ AI Assistant initialized!');
        }
    }, 100);
});
